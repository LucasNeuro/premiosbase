import { supabase } from '../lib/supabase';
import { calculateCampaignProgressAuxiliar } from './campaignProgressAuxiliar';

/**
 * üîß SERVI√áO DE CORRE√á√ÉO DE STATUS DAS CAMPANHAS
 * 
 * Este servi√ßo corrige campanhas que est√£o com status incorreto,
 * especialmente aquelas que aparecem como "completed" mas n√£o deveriam.
 */
export class CampaignStatusCorrectionService {
  
  /**
   * Corrigir status de todas as campanhas de um usu√°rio
   */
  static async correctUserCampaignStatuses(userId: string): Promise<void> {
    try {
      console.log(`üîß CampaignStatusCorrectionService: Corrigindo status das campanhas do usu√°rio ${userId}`);
      
      // Buscar todas as campanhas do usu√°rio
      const { data: campaigns, error } = await supabase
                .from('goals')
        .select('id, title, status, progress_percentage, acceptance_status')
        .eq('user_id', userId)
                .eq('record_type', 'campaign')
        .eq('is_active', true)
        .in('status', ['active', 'completed', 'cancelled']);
      
      if (error) {
        console.error('‚ùå Erro ao buscar campanhas:', error);
        return;
      }
      
      if (!campaigns || campaigns.length === 0) {
        console.log('‚ÑπÔ∏è Nenhuma campanha encontrada para corre√ß√£o');
        return;
      }
      
      console.log(`üìä Encontradas ${campaigns.length} campanhas para verifica√ß√£o`);
      
      // Verificar cada campanha
      for (const campaign of campaigns) {
        await this.correctCampaignStatus(campaign.id, campaign.title);
      }
      
      console.log('‚úÖ Corre√ß√£o de status conclu√≠da');

        } catch (error) {
      console.error('‚ùå Erro na corre√ß√£o de status:', error);
        }
    }

    /**
   * Corrigir status de uma campanha espec√≠fica
   */
  static async correctCampaignStatus(campaignId: string, campaignTitle: string): Promise<void> {
    try {
      // Calcular progresso atual
      const progressData = await calculateCampaignProgressAuxiliar(campaignId);
      
      if (!progressData) {
        console.log(`‚ö†Ô∏è N√£o foi poss√≠vel calcular progresso da campanha ${campaignTitle}`);
        return;
      }
      
      // Buscar status atual
      const { data: currentCampaign, error: fetchError } = await supabase
        .from('goals')
        .select('status, progress_percentage, acceptance_status')
        .eq('id', campaignId)
        .single();
      
      if (fetchError) {
        console.error(`‚ùå Erro ao buscar campanha ${campaignTitle}:`, fetchError);
        return;
      }
      
      const currentStatus = currentCampaign.status;
      const currentProgress = currentCampaign.progress_percentage || 0;
      const isAccepted = currentCampaign.acceptance_status === 'accepted';
      
      // üîß CORRE√á√ÉO: L√≥gica mais rigorosa para status correto
      let correctStatus = 'active';
      
      if (!isAccepted) {
        // Campanha n√£o aceita = pending (n√£o deveria estar em completed)
        if (currentStatus === 'completed') {
          console.log(`üîß CORRE√á√ÉO: Campanha "${campaignTitle}" estava como completed mas n√£o foi aceita`);
          correctStatus = 'active'; // Voltar para active
        }
      } else if (progressData.isCompleted && progressData.progressPercentage >= 100) {
        // üîß VALIDA√á√ÉO RIGOROSA: S√≥ completed se TODOS os crit√©rios foram atingidos
        const allCriteriaMet = progressData.criteriaDetails?.every(criterion => 
          criterion.isThisCriterionMet && criterion.percentage >= 100
        ) || false;
        
        if (allCriteriaMet) {
          correctStatus = 'completed';
          console.log(`‚úÖ Campanha "${campaignTitle}" realmente atingiu TODOS os crit√©rios`);
        } else {
          correctStatus = 'active';
          console.log(`‚ö†Ô∏è Campanha "${campaignTitle}" n√£o atingiu todos os crit√©rios (${progressData.progressPercentage}%)`);
        }
      } else if (progressData.progressPercentage < 100) {
        // Campanha aceita mas progresso < 100% = active
        correctStatus = 'active';
      }
      
      // Verificar se precisa corrigir
      if (currentStatus !== correctStatus) {
        console.log(`üîß CORRE√á√ÉO: Campanha "${campaignTitle}"`);
        console.log(`   Status atual: ${currentStatus}`);
        console.log(`   Status correto: ${correctStatus}`);
        console.log(`   Progresso: ${progressData.progressPercentage}%`);
        console.log(`   Crit√©rios atendidos: ${progressData.isCompleted}`);
        
        // Atualizar status
        const updateData: any = {
          status: correctStatus,
          progress_percentage: progressData.progressPercentage,
          current_value: progressData.currentValue,
          last_updated: new Date().toISOString()
        };
        
        // Se marcando como completed, adicionar timestamp
        if (correctStatus === 'completed' && currentStatus !== 'completed') {
          updateData.achieved_at = new Date().toISOString();
          updateData.achieved_value = progressData.currentValue;
        }
        
        // Se voltando para active, limpar timestamps
        if (correctStatus === 'active' && currentStatus === 'completed') {
          updateData.achieved_at = null;
          updateData.achieved_value = null;
        }
        
        const { error: updateError } = await supabase
          .from('goals')
          .update(updateData)
          .eq('id', campaignId);
        
        if (updateError) {
          console.error(`‚ùå Erro ao atualizar campanha ${campaignTitle}:`, updateError);
        } else {
          console.log(`‚úÖ Campanha "${campaignTitle}" corrigida para ${correctStatus}`);
        }
      } else {
        console.log(`‚úÖ Campanha "${campaignTitle}" j√° est√° com status correto (${currentStatus})`);
      }
      
    } catch (error) {
      console.error(`‚ùå Erro ao corrigir campanha ${campaignTitle}:`, error);
    }
  }
  
  /**
   * Corrigir todas as campanhas com status incorreto no sistema
   */
  static async correctAllCampaignStatuses(): Promise<void> {
    try {
      console.log('üîß CampaignStatusCorrectionService: Iniciando corre√ß√£o global de status');
      
      // Buscar todos os usu√°rios com campanhas
      const { data: users, error: usersError } = await supabase
        .from('goals')
        .select('user_id')
        .eq('record_type', 'campaign')
        .eq('is_active', true)
        .not('user_id', 'is', null);
      
      if (usersError) {
        console.error('‚ùå Erro ao buscar usu√°rios:', usersError);
        return;
      }
      
      // Obter IDs √∫nicos de usu√°rios
      const uniqueUserIds = [...new Set(users?.map(u => u.user_id) || [])];
      
      console.log(`üìä Encontrados ${uniqueUserIds.length} usu√°rios com campanhas`);
      
      // Corrigir campanhas de cada usu√°rio
      for (const userId of uniqueUserIds) {
        await this.correctUserCampaignStatuses(userId);
      }
      
      console.log('‚úÖ Corre√ß√£o global de status conclu√≠da');
      
    } catch (error) {
      console.error('‚ùå Erro na corre√ß√£o global:', error);
    }
  }
}