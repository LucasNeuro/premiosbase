import { useCampaignsStore } from '../stores/useCampaignsStore';
import { usePoliciesStore } from '../stores/usePoliciesStore';
import { useUserStore } from '../stores/useUserStore';

/**
 * üîß SERVI√áO DE LIMPEZA DE CACHE
 * 
 * Este servi√ßo limpa o cache local quando necess√°rio,
 * especialmente quando o usu√°rio desloga.
 */
export class CacheCleanupService {
  
  /**
   * Limpar todo o cache local
   */
  static clearAllCache(): void {
    try {
      console.log('üßπ CacheCleanupService: Limpando todo o cache local...');
      
      // Limpar cache de campanhas
      const campaignsStore = useCampaignsStore.getState();
      campaignsStore.clearCache();
      
      // Limpar cache de ap√≥lices
      const policiesStore = usePoliciesStore.getState();
      policiesStore.clearCache();
      
      // Limpar cache do usu√°rio
      const userStore = useUserStore.getState();
      userStore.clearCache();
      
      // Limpar localStorage manualmente para garantir
      localStorage.removeItem('campaigns-storage');
      localStorage.removeItem('policies-storage');
      localStorage.removeItem('user-storage');
      localStorage.removeItem('settings-storage');
      
      console.log('‚úÖ Cache local limpo com sucesso');
      
    } catch (error) {
      console.error('‚ùå Erro ao limpar cache:', error);
    }
  }
  
  /**
   * Limpar cache apenas de campanhas (manter outros caches)
   */
  static clearCampaignsCache(): void {
    try {
      console.log('üßπ CacheCleanupService: Limpando cache de campanhas...');
      
      const campaignsStore = useCampaignsStore.getState();
      campaignsStore.clearCache();
      
      localStorage.removeItem('campaigns-storage');
      
      console.log('‚úÖ Cache de campanhas limpo');
      
    } catch (error) {
      console.error('‚ùå Erro ao limpar cache de campanhas:', error);
    }
  }
  
  /**
   * Limpar cache quando usu√°rio desloga
   */
  static clearCacheOnLogout(): void {
    try {
      console.log('üßπ CacheCleanupService: Limpando cache no logout...');
      
      this.clearAllCache();
      
      // Limpar tamb√©m dados de sess√£o
      sessionStorage.clear();
      
      console.log('‚úÖ Cache limpo no logout');
      
    } catch (error) {
      console.error('‚ùå Erro ao limpar cache no logout:', error);
    }
  }
  
  /**
   * Limpar cache expirado (manter dados v√°lidos)
   */
  static clearExpiredCache(): void {
    try {
      console.log('üßπ CacheCleanupService: Limpando cache expirado...');
      
      const campaignsStore = useCampaignsStore.getState();
      const policiesStore = usePoliciesStore.getState();
      const userStore = useUserStore.getState();
      
      // Verificar e limpar apenas caches expirados
      if (!campaignsStore.isCacheValid()) {
        campaignsStore.clearCache();
        console.log('üóëÔ∏è Cache de campanhas expirado removido');
      }
      
      if (!policiesStore.isCacheValid()) {
        policiesStore.clearCache();
        console.log('üóëÔ∏è Cache de ap√≥lices expirado removido');
      }
      
      if (!userStore.isCacheValid()) {
        userStore.clearCache();
        console.log('üóëÔ∏è Cache do usu√°rio expirado removido');
      }
      
      console.log('‚úÖ Cache expirado limpo');
      
    } catch (error) {
      console.error('‚ùå Erro ao limpar cache expirado:', error);
    }
  }
}
